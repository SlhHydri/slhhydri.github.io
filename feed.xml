<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://slhhydri.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://slhhydri.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-23T13:10:42+00:00</updated><id>https://slhhydri.github.io/feed.xml</id><title type="html">M. Saleh Heydari</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Recursion in Python &amp;amp; C</title><link href="https://slhhydri.github.io/blog/2024/code/" rel="alternate" type="text/html" title="Recursion in Python &amp;amp; C"/><published>2024-01-20T14:54:00+00:00</published><updated>2024-01-20T14:54:00+00:00</updated><id>https://slhhydri.github.io/blog/2024/code</id><content type="html" xml:base="https://slhhydri.github.io/blog/2024/code/"><![CDATA[<p>A classic application of recursive functions is finding the \(n\)-th element of the Fibonacci sequence. The Fibonacci sequence can be simply defined as:</p> <p>\begin{equation}a_1=0, a_2=1, a_n = a_{n-1} + a_{n-2}\end{equation}</p> <p>Here is how you can find the \(n\)-th element of the sequence using recursion.</p> <h2 id="python">Python:</h2> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">fibb</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">fibb</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="c">C:</h2> <figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">fibb</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">fibb</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Easy!</p>]]></content><author><name></name></author><category term="BP"/><category term="recursion"/><category term="python"/><category term="c"/><summary type="html"><![CDATA[Two simple codes, demonstrating how to implement a simple recursive function in Python & C.]]></summary></entry><entry><title type="html">Iranian Tileworks</title><link href="https://slhhydri.github.io/blog/2024/images/" rel="alternate" type="text/html" title="Iranian Tileworks"/><published>2024-01-20T14:31:00+00:00</published><updated>2024-01-20T14:31:00+00:00</updated><id>https://slhhydri.github.io/blog/2024/images</id><content type="html" xml:base="https://slhhydri.github.io/blog/2024/images/"><![CDATA[<p>Overlooking a beutiful Iranian art such as tileworks is simply a mistake.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/tiles-480.webp 480w,/assets/img/tiles-800.webp 800w,/assets/img/tiles-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/tiles.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A masterpiece of architecture and calligraphy. </div>]]></content><author><name></name></author><category term="Art"/><category term="tiles"/><category term="art"/><summary type="html"><![CDATA[A retrospective of an extraordinary art.]]></summary></entry><entry><title type="html">Applications of Integration</title><link href="https://slhhydri.github.io/blog/2024/math/" rel="alternate" type="text/html" title="Applications of Integration"/><published>2024-01-19T19:11:00+00:00</published><updated>2024-01-19T19:11:00+00:00</updated><id>https://slhhydri.github.io/blog/2024/math</id><content type="html" xml:base="https://slhhydri.github.io/blog/2024/math/"><![CDATA[<p>Integrals can be used to solve a variety of problems. For example, you might need to calculate the arc length of a curve given by function \(y = f(x)\).</p> <p>This can be done quite simply using the following formula.</p> <p>The arc length $S$ of the curve \(y = f(x)\) from point \(x = a\) to \(x = b\) is given by:</p> <p>\begin{equation}S = \int_{a}^{b} \sqrt{1+f^{2}(x)} \,dx \end{equation}</p> <p>If your function is expressed as \(x=f(y)\), the following formula can be of more use:</p> <p>\begin{equation}S = \int_{a}^{b} \sqrt{1+x’^{2}} \,dx \end{equation}</p> <p>Finally, for a given polar curve, expressed as \(r=f(\theta)\), you may use:</p> <p>\begin{equation}S = \int_{\theta_1}^{\theta_2} \sqrt{f^2(\theta)+f’^{2}(\theta)} \,d\theta \end{equation}</p> <p>For further applications, referring to the introduced source books is advised.</p>]]></content><author><name></name></author><category term="GM1"/><category term="integral"/><category term="integration"/><category term="application"/><summary type="html"><![CDATA[this is a simple explanation of what can integrals be used for.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://slhhydri.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://slhhydri.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://slhhydri.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>